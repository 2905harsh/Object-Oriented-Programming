ðŸ”¹ Abstraction

Definition:
Abstraction is the concept of hiding unnecessary details from the user and only exposing essential features.

Real-Life Example:
Consider a car. When you want to drive, you simply press the start button or turn the key. You donâ€™t need to know how the engine starts, how fuel is injected, or how combustion occurs. These internal mechanisms are hidden, and you interact only with simple controls. Thatâ€™s abstraction â€” showing only whatâ€™s needed.

Purpose:
	â€¢	To reduce complexity.
	â€¢	To focus on what an object does, not how it does it.
	â€¢	Makes systems easier to use and modify.

Key Characteristics:
	â€¢	Hides complex implementation.
	â€¢	Provides a clean and user-friendly interface.
	â€¢	Helps in achieving modularity and separation of concerns.
	â€¢	Operates at the design level of a system.

Example in Daily Life:
	â€¢	Using a remote control: You press a button to change the channel but donâ€™t know how signals are transmitted.
	â€¢	Using a smartphone: You tap an icon, and the app opens â€” you donâ€™t see the backend logic.

ðŸ”¹ Encapsulation

Definition:
Encapsulation is the process of wrapping data and its related operations (methods) into a single unit and restricting direct access to some of the objectâ€™s components for security and integrity.

Real-Life Example:
Think of a medicine capsule â€” different ingredients are sealed inside one shell. You canâ€™t directly see or alter whatâ€™s inside. Similarly, in software, data is hidden within a unit (like a class), and access is provided only through controlled mechanisms.

Purpose:
	â€¢	To ensure data protection and integrity.
	â€¢	To control how data is accessed or modified.
	â€¢	To prevent accidental interference with internal object state.

Key Characteristics:
	â€¢	Data is shielded from external modification.
	â€¢	Access is provided through well-defined methods or interfaces.
	â€¢	Helps in maintenance, security, and modularity.
	â€¢	Operates at the implementation level.

Example in Daily Life:
	â€¢	ATM Machine: You insert your card and interact via a screen. You cannot see or access the internal cash counter directly.
	â€¢	Bank Account: You canâ€™t access the internal data directly; you use the bank interface (ATM, app) to deposit, withdraw, or view details.
