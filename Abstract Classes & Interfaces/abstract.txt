In Java, there are situations where we design a superclass to act as a generalized template, without providing full implementations for every method. The intention here is to allow the subclasses to define specific behaviors while still following a common structure.

To enforce that certain methods must be implemented by the subclasses, Java provides the concept of abstract methods. An abstract method does not have a body in the superclass — it only defines the method signature — and it is the responsibility of the subclass to override it. These are often referred to as the subclass’s responsibilities.

An abstract method is declared using the abstract keyword, like so:

abstract returnType methodName(parameterList);

When a class contains one or more abstract methods, it must also be declared abstract(public abstract class <className>{}). Such classes cannot be instantiated directly, since they are considered incomplete. This mechanism helps enforce a contract: any concrete subclass must provide implementations for all abstract methods, ensuring consistency across different subclasses.

This design approach is particularly useful when you're implementing a common interface or defining a framework where the base class provides shared behavior, and the subclasses fill in the specific logic.

